"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _EvaluatorBase2 = _interopRequireDefault(require("./EvaluatorBase"));

var _ColorScale = _interopRequireDefault(require("../ColorScale"));

var Utils = _interopRequireWildcard(require("../utils"));

var _ValueType = _interopRequireDefault(require("../ValueType"));

var _BlendMode = _interopRequireDefault(require("../BlendMode"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Chroma = require('chroma-js');

var VarOp = {
  Store: 0,
  Retrieve: 1,
  Delete: 2
};

var CoreEvaluator =
/*#__PURE__*/
function (_EvaluatorBase) {
  _inherits(CoreEvaluator, _EvaluatorBase);

  function CoreEvaluator() {
    var _this;

    _classCallCheck(this, CoreEvaluator);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(CoreEvaluator).call(this, 'core'));

    _defineProperty(_assertThisInitialized(_this), "_varsDict", Object.create(null));

    return _this;
  }

  _createClass(CoreEvaluator, [{
    key: "evalProgram",
    value: function evalProgram(node) {
      var _this2 = this;

      var values = node.statements.map(function (st) {
        return st.evaluate(_this2);
      });
      var value = values[values.length - 1];

      this._manageVar(VarOp.Store, '$', value);

      return value;
    }
  }, {
    key: "evalStatement",
    value: function evalStatement(node) {
      var value = node.expr.evaluate(this);
      return value;
    }
  }, {
    key: "evalParentheses",
    value: function evalParentheses(node) {
      var value = node.expr.evaluate(this);
      value = Utils.cloneValue(value);
      return value;
    }
  }, {
    key: "evalNumberLiteral",
    value: function evalNumberLiteral(node) {
      var octal = node.value.replace(/^0o/, '');
      var value = octal !== node.value ? parseInt(octal, 8) : Number(node.value);
      return value;
    }
  }, {
    key: "evalPercent",
    value: function evalPercent(node) {
      var value = Utils.forceNumInRange(node.value.evaluate(this), -100, 100, node.value.$loc);
      var n = value / 100.0;
      return n;
    }
  }, {
    key: "evalArrayLiteral",
    value: function evalArrayLiteral(node) {
      var _this3 = this;

      var value = node.value.map(function (expr) {
        return expr.evaluate(_this3);
      });
      return value;
    }
  }, {
    key: "evalArrayElement",
    value: function evalArrayElement(node) {
      var array = Utils.forceType(node.obj.evaluate(this), _ValueType["default"].Array, node.obj.$loc);
      var index = Utils.forceNumInRange(+node.name, 0, array.length - 1, node.$loc);
      var value = array[index];
      return value;
    }
  }, {
    key: "evalColorNameLiteral",
    value: function evalColorNameLiteral(node) {
      var value = Chroma(node.value);
      return value;
    }
  }, {
    key: "evalColorHexLiteral",
    value: function evalColorHexLiteral(node) {
      var value = Chroma(node.value);
      return value;
    }
  }, {
    key: "evalColorByNumber",
    value: function evalColorByNumber(node) {
      var n = Utils.forceNumInRange(node.value.evaluate(this), 0, 0xffffff, node.value.$loc);
      var value = Chroma(n);
      return value;
    }
  }, {
    key: "evalColorByTemperature",
    value: function evalColorByTemperature(node) {
      var temperature = Utils.forceNumInRange(node.value.evaluate(this), 0, 200000, node.value.$loc);
      var value = Chroma.temperature(temperature);
      return value;
    }
  }, {
    key: "evalColorByWavelength",
    value: function evalColorByWavelength(node) {
      var wl = Utils.forceNumInRange(node.value.evaluate(this), 350, 780, node.value.$loc);
      var value = Utils.colorFromWavelength(wl);
      return value;
    }
  }, {
    key: "evalColorBySpaceParams",
    value: function evalColorBySpaceParams(node) {
      var _this4 = this;

      var space = node.space;
      var paramExprs = node.params.slice(0);
      var params = node.params.map(function (expr) {
        return expr.evaluate(_this4);
      });
      var alphaExpr = null;
      var alpha;

      if (space === 'argb') {
        alpha = params.shift();
        alphaExpr = paramExprs.shift();
        space = 'rgb';
      } else if (params.length > (space === 'cmyk' ? 4 : 3)) {
        alpha = params.pop();
        alphaExpr = paramExprs.pop();
      }

      var ranges = Utils.getColorSpaceParamsValidRanges(space);

      if (params.length !== ranges.length) {
        Utils.throwError("invalid number of params for color space ".concat(node.space.toUpperCase()), node.$loc);
      }

      for (var i = 0; i < params.length; i++) {
        Utils.forceNumInRange(params[i], ranges[i], paramExprs[i].$loc);
      }

      if (space === 'cmy') {
        params = Utils.cmyToCmykArray(params);
        space = 'cmyk';
      }

      var value = Chroma(params, space);

      if (alpha != null) {
        value = value.alpha(Utils.forceNumInRange(alpha, 0, 1, alphaExpr.$loc));
      }

      return value;
    }
  }, {
    key: "evalRandomColor",
    value: function evalRandomColor()
    /*node*/
    {
      var value = Chroma.random();
      return value;
    }
  }, {
    key: "evalScale",
    value: function evalScale(node) {
      var _this5 = this;

      var colors = Array.isArray(node.colors) ? node.colors.map(function (expr) {
        return Utils.forceType(expr.evaluate(_this5), _ValueType["default"].Color, expr.$loc);
      }) : Utils.forceType(node.colors.evaluate(this), _ValueType["default"].ColorArray, node.colors.$loc);

      if (colors && colors.length < 2) {
        Utils.throwError('two or more colors are required for interpolation');
      }

      var scaleParams = [{
        name: 'colors',
        value: colors
      }];

      if (node.domain !== void 0) {
        var domain = node.domain.map(function (expr) {
          return Utils.forceType(expr.evaluate(_this5), _ValueType["default"].Number, expr.$loc);
        });
        scaleParams.push({
          name: 'domain',
          value: domain
        });
      }

      if (node.mode !== void 0) {
        scaleParams.push({
          name: 'mode',
          value: node.mode
        });
      }

      var value = new _ColorScale["default"]('scale', void 0, scaleParams);
      return value;
    }
  }, {
    key: "evalBezier",
    value: function evalBezier(node) {
      var colors = Utils.forceType(node.colors.evaluate(this), _ValueType["default"].ColorArray, node.colors.$loc);
      var colorsMin = 2;
      var colorsMax = 5;

      if (colors.length < colorsMin || colors.length > colorsMax) {
        Utils.throwError("bezier interpolate supports from ".concat(colorsMin, " to ").concat(colorsMax, " colors, you provided: ").concat(colors.length));
      }

      var scaleParams = [{
        name: 'colors',
        value: colors
      }];
      var value = new _ColorScale["default"]('bezier', void 0, scaleParams);
      return value;
    }
  }, {
    key: "evalCubehelix",
    value: function evalCubehelix()
    /*node*/
    {
      var value = new _ColorScale["default"]('cubehelix');
      return value;
    }
  }, {
    key: "evalBrewerConst",
    value: function evalBrewerConst(node) {
      var dict = CoreEvaluator._getBrewerConstsDict();

      var colorStrs = dict[node.name.toLowerCase()];
      var colors = colorStrs.map(function (s) {
        return Chroma(s);
      });
      return colors;
    }
  }, {
    key: "evalUnaryMinus",
    value: function evalUnaryMinus(node) {
      var value = Utils.forceType(node.value.evaluate(this), _ValueType["default"].Number, node.value.$loc);
      value = -value;
      return value;
    }
  }, {
    key: "evalColorInverse",
    value: function evalColorInverse(node) {
      var value = Utils.forceType(node.value.evaluate(this), _ValueType["default"].Color, node.value.$loc);
      value = Utils.inverseColor(value);
      return value;
    }
  }, {
    key: "evalCorrectLightness",
    value: function evalCorrectLightness(node) {
      var value = Utils.forceType(node.value.evaluate(this), _ValueType["default"].ColorScale, node.value.$loc);
      value = value.clone();
      value.scaleParams.push({
        name: 'correctLightness'
      });
      return value;
    }
  }, {
    key: "evalNumbersAddition",
    value: function evalNumbersAddition(node) {
      return this._numbersArithmeticOp(node);
    }
  }, {
    key: "evalNumbersSubtraction",
    value: function evalNumbersSubtraction(node) {
      return this._numbersArithmeticOp(node);
    }
  }, {
    key: "evalNumbersMultiplication",
    value: function evalNumbersMultiplication(node) {
      return this._numbersArithmeticOp(node);
    }
  }, {
    key: "evalNumbersDivision",
    value: function evalNumbersDivision(node) {
      return this._numbersArithmeticOp(node);
    }
  }, {
    key: "evalColorAndNumberAddition",
    value: function evalColorAndNumberAddition(node) {
      return this._colorArithmeticOp(node);
    }
  }, {
    key: "evalColorAndNumberSubtraction",
    value: function evalColorAndNumberSubtraction(node) {
      return this._colorArithmeticOp(node);
    }
  }, {
    key: "evalColorAndNumberMultiplication",
    value: function evalColorAndNumberMultiplication(node) {
      return this._colorArithmeticOp(node);
    }
  }, {
    key: "evalColorAndNumberDivision",
    value: function evalColorAndNumberDivision(node) {
      return this._colorArithmeticOp(node);
    }
  }, {
    key: "evalNumberPower",
    value: function evalNumberPower(node) {
      var left = node.left.evaluate(this);
      var right = node.right.evaluate(this);
      var value = Math.pow(left, right);
      return value;
    }
  }, {
    key: "evalColorsContrast",
    value: function evalColorsContrast(node) {
      var left = node.left.evaluate(this);
      var right = node.right.evaluate(this);
      var value = Chroma.contrast(left, right);
      return value;
    }
  }, {
    key: "evalColorsMix",
    value: function evalColorsMix(node) {
      var left = node.left.evaluate(this);
      var right = node.right.evaluate(this);
      var ratioExpr = (node.options || {}).ratio;
      var ratio = ratioExpr ? Utils.forceType(ratioExpr.evaluate(this), _ValueType["default"].Number, ratioExpr.$loc) : void 0;
      var mode = (node.options || {}).mode || 'rgb';
      var value = Chroma.mix(left, right, ratio, mode);
      return value;
    }
  }, {
    key: "evalColorsFromScaleProduction",
    value: function evalColorsFromScaleProduction(node) {
      var left = node.left.evaluate(this);
      var right = Utils.forceNumInRange(node.right.evaluate(this), 2, 0xffff, node.right.$loc);
      var value = left.getFn().colors(right).map(function (s) {
        return Chroma(s);
      });
      return value;
    }
  }, {
    key: "evalColorDesaturate",
    value: function evalColorDesaturate(node) {
      return this._adjustColorCompOp(node, 'lch.c', false);
    }
  }, {
    key: "evalColorSaturate",
    value: function evalColorSaturate(node) {
      return this._adjustColorCompOp(node, 'lch.c', true);
    }
  }, {
    key: "evalColorDarken",
    value: function evalColorDarken(node) {
      return this._adjustColorCompOp(node, 'lab.l', false);
    }
  }, {
    key: "evalColorLighten",
    value: function evalColorLighten(node) {
      return this._adjustColorCompOp(node, 'lab.l', true);
    }
  }, {
    key: "evalAddBlend",
    value: function evalAddBlend(node) {
      return this._blendColorsOp(node, _BlendMode["default"].Add);
    }
  }, {
    key: "evalSubtractBlend",
    value: function evalSubtractBlend(node) {
      return this._blendColorsOp(node, _BlendMode["default"].Subtract);
    }
  }, {
    key: "evalMultiplyBlend",
    value: function evalMultiplyBlend(node) {
      return this._blendColorsOp(node, _BlendMode["default"].Multiply);
    }
  }, {
    key: "evalDivideBlend",
    value: function evalDivideBlend(node) {
      return this._blendColorsOp(node, _BlendMode["default"].Divide);
    }
  }, {
    key: "evalColorBurnBlend",
    value: function evalColorBurnBlend(node) {
      return this._blendColorsOp(node, _BlendMode["default"].ColorBurn);
    }
  }, {
    key: "evalColorDodgeBlend",
    value: function evalColorDodgeBlend(node) {
      return this._blendColorsOp(node, _BlendMode["default"].ColorDodge);
    }
  }, {
    key: "evalDarkenBlend",
    value: function evalDarkenBlend(node) {
      return this._blendColorsOp(node, _BlendMode["default"].Darken);
    }
  }, {
    key: "evalLightenBlend",
    value: function evalLightenBlend(node) {
      return this._blendColorsOp(node, _BlendMode["default"].Lighten);
    }
  }, {
    key: "evalScreenBlend",
    value: function evalScreenBlend(node) {
      return this._blendColorsOp(node, _BlendMode["default"].Screen);
    }
  }, {
    key: "evalOverlayBlend",
    value: function evalOverlayBlend(node) {
      return this._blendColorsOp(node, _BlendMode["default"].Overlay);
    }
  }, {
    key: "evalHardLightBlend",
    value: function evalHardLightBlend(node) {
      return this._blendColorsOp(node, _BlendMode["default"].HardLight);
    }
  }, {
    key: "evalSoftLightBlend",
    value: function evalSoftLightBlend(node) {
      return this._blendColorsOp(node, _BlendMode["default"].SoftLight);
    }
  }, {
    key: "evalDifferenceBlend",
    value: function evalDifferenceBlend(node) {
      return this._blendColorsOp(node, _BlendMode["default"].Difference);
    }
  }, {
    key: "evalExclusionBlend",
    value: function evalExclusionBlend(node) {
      return this._blendColorsOp(node, _BlendMode["default"].Exclusion);
    }
  }, {
    key: "evalNegateBlend",
    value: function evalNegateBlend(node) {
      return this._blendColorsOp(node, _BlendMode["default"].Negate);
    }
  }, {
    key: "evalManageColorNumber",
    value: function evalManageColorNumber(node) {
      var curObj = node.obj.evaluate(this);
      var curValue = Number("0x".concat(curObj.hex().replace(/^#/, '')));

      if (node.value === void 0) {
        // get
        return curValue;
      } else {
        // set
        var value = Utils.forceNumInRange(node.value.evaluate(this), 0, 0xffffff, node.value.$loc);

        if (node.operator) {
          // set rel
          value = Math.max(Math.min(this._getNumberArithmeticFunc(node.operator)(curValue, value), 0xffffff), 0);
        }

        var obj = Chroma(value);
        obj = obj.alpha(curObj.alpha());
        return obj;
      }
    }
  }, {
    key: "evalManageColorTemperature",
    value: function evalManageColorTemperature(node) {
      var curValue = node.obj.evaluate(this).temperature();

      if (node.value === void 0) {
        return curValue;
      } else {
        var value = Utils.forceType(node.value.evaluate(this), _ValueType["default"].Number, node.value.$loc);

        if (node.operator) {
          value = this._getNumberArithmeticFunc(node.operator)(curValue, value);
        }

        var obj = Chroma.temperature(value);
        return obj;
      }
    }
  }, {
    key: "evalManageColorLuminance",
    value: function evalManageColorLuminance(node) {
      var obj = Utils.cloneValue(node.obj.evaluate(this));
      var curValue = obj.luminance();

      if (node.value === void 0) {
        return curValue;
      } else {
        var value = Utils.forceNumInRange(node.value.evaluate(this), 0, 1, node.value.$loc);

        if (node.operator) {
          value = this._getNumberArithmeticFunc(node.operator)(curValue, value);
        }

        var space = node.name.match(/^((\w+)\.)?\w+/i)[2] || void 0;
        obj.luminance(value, space);
        return obj;
      }
    }
  }, {
    key: "evalManageColorAlpha",
    value: function evalManageColorAlpha(node) {
      var obj = Utils.cloneValue(node.obj.evaluate(this));
      var curValue = obj.alpha();

      if (node.value === void 0) {
        return curValue;
      } else {
        var value = ['*', '/'].includes(node.operator) ? Utils.forceType(node.value.evaluate(this), _ValueType["default"].Number, node.value.$loc) : Utils.forceNumInRange(node.value.evaluate(this), 0, 1, node.value.$loc);

        if (node.operator) {
          value = this._getNumberArithmeticFunc(node.operator)(curValue, value);
        }

        obj = obj.alpha(value);
        return obj;
      }
    }
  }, {
    key: "manageColorCompOp",
    value: function manageColorCompOp(node, comp) {
      var obj = Utils.cloneValue(node.obj.evaluate(this));
      var curValue = obj.get(comp);

      if (node.value === void 0) {
        return curValue;
      } else {
        var parts = comp.split('.');
        var ranges = Utils.getColorSpaceParamsValidRanges(parts[0]);
        var index = parts[0].indexOf(parts[1]);
        var range = ranges[index];
        var value = Utils.forceNumInRange(node.value.evaluate(this), range, node.value.$loc);

        if (node.operator) {
          value = this._getNumberArithmeticFunc(node.operator)(curValue, value);
        }

        obj = obj.set(comp, value);
        return obj;
      }
    }
  }, {
    key: "evalManageColorCompRgbR",
    value: function evalManageColorCompRgbR(node) {
      return this.manageColorCompOp(node, 'rgb.r');
    }
  }, {
    key: "evalManageColorCompRgbG",
    value: function evalManageColorCompRgbG(node) {
      return this.manageColorCompOp(node, 'rgb.g');
    }
  }, {
    key: "evalManageColorCompRgbB",
    value: function evalManageColorCompRgbB(node) {
      return this.manageColorCompOp(node, 'rgb.b');
    }
  }, {
    key: "evalManageColorCompCmykC",
    value: function evalManageColorCompCmykC(node) {
      return this.manageColorCompOp(node, 'cmyk.c');
    }
  }, {
    key: "evalManageColorCompCmykM",
    value: function evalManageColorCompCmykM(node) {
      return this.manageColorCompOp(node, 'cmyk.m');
    }
  }, {
    key: "evalManageColorCompCmykY",
    value: function evalManageColorCompCmykY(node) {
      return this.manageColorCompOp(node, 'cmyk.y');
    }
  }, {
    key: "evalManageColorCompCmykK",
    value: function evalManageColorCompCmykK(node) {
      return this.manageColorCompOp(node, 'cmyk.k');
    }
  }, {
    key: "evalManageColorCompHslH",
    value: function evalManageColorCompHslH(node) {
      return this.manageColorCompOp(node, 'hsl.h');
    }
  }, {
    key: "evalManageColorCompHslS",
    value: function evalManageColorCompHslS(node) {
      return this.manageColorCompOp(node, 'hsl.s');
    }
  }, {
    key: "evalManageColorCompHslL",
    value: function evalManageColorCompHslL(node) {
      return this.manageColorCompOp(node, 'hsl.l');
    }
  }, {
    key: "evalManageColorCompHsvH",
    value: function evalManageColorCompHsvH(node) {
      return this.manageColorCompOp(node, 'hsv.h');
    }
  }, {
    key: "evalManageColorCompHsvS",
    value: function evalManageColorCompHsvS(node) {
      return this.manageColorCompOp(node, 'hsv.s');
    }
  }, {
    key: "evalManageColorCompHsvV",
    value: function evalManageColorCompHsvV(node) {
      return this.manageColorCompOp(node, 'hsv.v');
    }
  }, {
    key: "evalManageColorCompHsiH",
    value: function evalManageColorCompHsiH(node) {
      return this.manageColorCompOp(node, 'hsi.h');
    }
  }, {
    key: "evalManageColorCompHsiS",
    value: function evalManageColorCompHsiS(node) {
      return this.manageColorCompOp(node, 'hsi.s');
    }
  }, {
    key: "evalManageColorCompHsiI",
    value: function evalManageColorCompHsiI(node) {
      return this.manageColorCompOp(node, 'hsi.i');
    }
  }, {
    key: "evalManageColorCompLabL",
    value: function evalManageColorCompLabL(node) {
      return this.manageColorCompOp(node, 'lab.l');
    }
  }, {
    key: "evalManageColorCompLabA",
    value: function evalManageColorCompLabA(node) {
      return this.manageColorCompOp(node, 'lab.a');
    }
  }, {
    key: "evalManageColorCompLabB",
    value: function evalManageColorCompLabB(node) {
      return this.manageColorCompOp(node, 'lab.b');
    }
  }, {
    key: "evalManageColorCompLchL",
    value: function evalManageColorCompLchL(node) {
      return this.manageColorCompOp(node, 'lch.l');
    }
  }, {
    key: "evalManageColorCompLchC",
    value: function evalManageColorCompLchC(node) {
      return this.manageColorCompOp(node, 'lch.c');
    }
  }, {
    key: "evalManageColorCompLchH",
    value: function evalManageColorCompLchH(node) {
      return this.manageColorCompOp(node, 'lch.h');
    }
  }, {
    key: "evalSetColorScalePadding",
    value: function evalSetColorScalePadding(node) {
      var value = node.value.evaluate(this);
      value = Array.isArray(value) ? Utils.forceRange(value, node.value.$loc) : Utils.forceType(value, _ValueType["default"].Number, node.value.$loc);

      var obj = this._addColorScaleParam(node, true, 'padding', value);

      return obj;
    }
  }, {
    key: "evalSetScaleDomain",
    value: function evalSetScaleDomain(node) {
      var value = Utils.forceType(node.value.evaluate(this), _ValueType["default"].NumberArray, node.value.$loc);

      if (value.length < 2) {
        Utils.throwError("'domain' parameter should contain at least two elements");
      }

      var obj = this._addColorScaleParam(node, true, 'domain', value);

      return obj;
    }
  }, {
    key: "evalSetCubehelixStart",
    value: function evalSetCubehelixStart(node) {
      var value = Utils.forceNumInRange(node.value.evaluate(this), 0, 360, node.value.$loc);

      var obj = this._addColorScaleParam(node, false, 'start', value);

      return obj;
    }
  }, {
    key: "evalSetCubehelixRotations",
    value: function evalSetCubehelixRotations(node) {
      var value = Utils.forceType(node.value.evaluate(this), _ValueType["default"].Number, node.value.$loc);

      var obj = this._addColorScaleParam(node, false, 'rotations', value);

      return obj;
    }
  }, {
    key: "evalSetCubehelixHue",
    value: function evalSetCubehelixHue(node) {
      var value = node.value.evaluate(this);
      value = Array.isArray(value) ? Utils.forceRange(value, node.value.$loc) : Utils.forceType(value, _ValueType["default"].Number, node.value.$loc);

      var obj = this._addColorScaleParam(node, false, 'hue', value);

      return obj;
    }
  }, {
    key: "evalSetCubehelixGamma",
    value: function evalSetCubehelixGamma(node) {
      var value = Utils.forceType(node.value.evaluate(this), _ValueType["default"].Number, node.value.$loc);

      var obj = this._addColorScaleParam(node, false, 'gamma', value);

      return obj;
    }
  }, {
    key: "evalSetCubehelixLightness",
    value: function evalSetCubehelixLightness(node) {
      var value = Utils.forceRange(node.value.evaluate(this), node.value.$loc);

      if (value[0] === value[1]) {
        Utils.throwError("empty 'lightness' range");
      }

      var obj = this._addColorScaleParam(node, false, 'lightness', value);

      return obj;
    }
  }, {
    key: "evalGetVar",
    value: function evalGetVar(node) {
      var value = this._manageVar(VarOp.Retrieve, node.name);

      return value;
    }
  }, {
    key: "evalSetVar",
    value: function evalSetVar(node) {
      var value = node.value.evaluate(this);

      this._manageVar(VarOp.Store, node.name, value);

      return value;
    }
  }, {
    key: "_manageVar",
    value: function _manageVar(op, name, value) {
      var name2 = name.replace(/^\$/, '').toLowerCase() || '$';
      var dict = this._varsDict;

      switch (op) {
        case VarOp.Store:
          dict[name2] = value;

          if (value === void 0) {
            Utils.throwError("cannot assign undefined value to variable ".concat(name));
          }

          break;

        case VarOp.Retrieve:
          value = dict[name2];

          if (value === void 0) {
            Utils.throwError("variable ".concat(name, " is not defined"));
          }

          break;

        case VarOp.Delete:
          value = dict[name2];
          delete dict[name2];
          break;
      }

      return value;
    }
  }, {
    key: "_numbersArithmeticOp",
    value: function _numbersArithmeticOp(node) {
      var left = node.left.evaluate(this);
      var right = node.right.evaluate(this);

      var value = this._getNumberArithmeticFunc(node.operator)(left, right);

      return value;
    }
  }, {
    key: "_blendColorsOp",
    value: function _blendColorsOp(node, mode) {
      var left = node.left.evaluate(this);
      var right = node.right.evaluate(this);
      var value = Utils.blendColors(left, right, mode);
      return value;
    }
  }, {
    key: "_colorArithmeticOp",
    value: function _colorArithmeticOp(node) {
      var left = node.left.evaluate(this);
      var right = node.right.evaluate(this);
      var value = Utils.colorArithmeticOp(left, right, node.operator);
      return value;
    }
  }, {
    key: "_adjustColorCompOp",
    value: function _adjustColorCompOp(node, colorComp, add) {
      var left = node.left.evaluate(this);
      var right = Utils.forceNumInRange(node.right.evaluate(this), 0, 1, node.right.$loc);
      var value = Utils.cloneValue(left).set(colorComp, "*".concat(!add ? 1 - right : 1 + right));
      return value;
    }
  }, {
    key: "_addColorScaleParam",
    value: function _addColorScaleParam(node, scaleParams, name, value) {
      var obj = Utils.cloneValue(node.obj.evaluate(this));
      var params = scaleParams ? obj.scaleParams : obj.params;

      for (var i = 0; i < params.length; i++) {
        if (params[i].name === name) {
          params.splice(i, 1);
          break;
        }
      }

      params.push({
        name: name,
        value: value
      });
      return obj;
    }
  }, {
    key: "core",
    get: function get() {
      return this;
    }
  }], [{
    key: "_getBrewerConstsDict",
    value: function _getBrewerConstsDict() {
      var dict = this._brewerConstsDict;

      if (!dict) {
        dict = Object.create(null);

        for (var key in Chroma.brewer) {
          if (key in Chroma.brewer) {
            dict[key.toLowerCase()] = Chroma.brewer[key];
          }
        }

        this._brewerConstsDict = dict;
      }

      return dict;
    }
  }, {
    key: "instance",
    get: function get() {
      return this._instance || (this._instance = new CoreEvaluator());
    }
  }]);

  return CoreEvaluator;
}(_EvaluatorBase2["default"]);

exports["default"] = CoreEvaluator;